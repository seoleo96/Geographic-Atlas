plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.navigation.safeargs'
    id 'kotlin-kapt'
    id 'kotlinx-serialization'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
println(keystorePropertiesFile.exists())
//println(file(keystoreProperties['storeFile']))
//println(keystoreProperties['keyAlias'])
//println(file(keystoreProperties['storeFile'])?.exists())
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}else {
    throw new FileNotFoundException("key.properties file not found in project root.")
}
println "Keystore Path: ${keystoreProperties['storeFile']}"
if (!keystoreProperties.containsKey('storeFile') || keystoreProperties['storeFile'] == null) {
    throw new IllegalStateException("storeFile property is missing or null in key.properties.")
}
println(file(keystoreProperties['storeFile']) == null)
if (file(keystoreProperties['storeFile']) == null) {
    throw new FileNotFoundException("Keystore file not found at: ${keystoreProperties['storeFile']}")
}
android {
    namespace 'com.example.geographicatlas'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.geographicatlas"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        release {
//            keyAlias keystoreProperties['keyAlias']
//            keyPassword keystoreProperties['keyPassword']
//            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
//            storePassword keystoreProperties['storePassword']

            storeFile file(System.getenv("ANDROID_KEYSTORE") ?: keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : "app\\strong_intern.jks") // Подстраховка, если переменная не задана
            storePassword System.getenv("KEYSTORE_PASSWORD") ?: keystoreProperties['storePassword']
            keyAlias System.getenv("KEY_ALIAS") ?: keystoreProperties['keyAlias']
            keyPassword System.getenv("ALIAS_PASSWORD") ?: keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    lint {
        // https://github.com/bumptech/glide/issues/4940
        lintConfig = file("$rootDir/android_glide_lint.xml")
        textOutput file('stdout')
        textReport true
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    //Kotlin
    implementation "androidx.core:core-ktx:$core_ktx_version"
    //Android
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "androidx.recyclerview:recyclerview:$recycler_view_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_fragment_ktx"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_fragment_ktx"
    implementation "androidx.legacy:legacy-support-v4:$legacy_support_v4"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_viewmodel_ktx"
    //Retrofit,Okhttp3
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$logging_interceptor"
    //Room
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    //Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    //Shimmer
    implementation "com.facebook.shimmer:shimmer:$shimmer_version"
    //Koin(simple)
    implementation "io.insert-koin:koin-android:$koin_android_version"

    //Gson
    implementation "com.squareup.retrofit2:converter-gson:$gson"
}